package RecursionAndBackTracking.S6_TraditionalAi;

import static Utils.Helpers.*;

import java.util.List;

/*
 * Sudoku Solver
 *
 * - 数独问题
 * */

public class L37_SudokuSolver {
    /*
     * 解法1：Recursion + Backtracking
     * - 思路：
     * - 时间复杂度 O()，空间复杂度 O()。
     * */
    public static void solveSudoku(char[][] board) {

    }

    public static void main(String[] args) {
        char[][] board = new char[][] {
          {'5', '3', ' ', ' ', '7', ' ', ' ', ' ', ' '},
          {'6', ' ', ' ', '1', '9', '5', ' ', ' ', ' '},
          {' ', '9', '8', ' ', ' ', ' ', ' ', '6', ' '},
          {'8', ' ', ' ', ' ', '6', ' ', ' ', ' ', '3'},
          {'4', ' ', ' ', '8', ' ', '3', ' ', ' ', '1'},
          {'7', ' ', ' ', ' ', '2', ' ', ' ', ' ', '6'},
          {' ', '6', ' ', ' ', ' ', ' ', '2', '8', ' '},
          {' ', ' ', ' ', '4', '1', '9', ' ', ' ', '5'},
          {' ', ' ', ' ', ' ', '8', ' ', ' ', '7', '9'}
        };
        solveSudoku(board);
        log(board);
        /*
         * expects {
         *   {'5', '3', '4', '6', '7', '8', '9', '1', '2'},
         *   {'6', '7', '2', '1', '9', '5', '3', '4', '8'},
         *   {'1', '9', '8', '3', '4', '2', '5', '6', '7'},
         *   {'8', '5', '9', '7', '6', '1', '4', '2', '3'},
         *   {'4', '1', '6', '8', '5', '3', '7', '9', '1'},
         *   {'7', '2', '3', '9', '2', '4', '8', '5', '6'},
         *   {'9', '6', '1', '5', '3', '7', '2', '8', '4'},
         *   {'2', '8', '7', '4', '1', '9', '6', '3', '5'},
         *   {'3', '4', '5', '2', '8', '6', '1', '7', '9'}
         * */
    }
}
